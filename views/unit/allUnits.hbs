<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.20/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.20/dist/sweetalert2.all.min.js"></script>

<link rel="stylesheet" href="/css/allUnits.css">

<div class="container">

    <div class="input-group" id="uploadUnitSection">
        <input type="file" class="form-control" accept=".json" id="jsonFileInput"
            aria-describedby="inputGroupFileAddon04" aria-label="Upload" data-buttonText="Your label here.">
        <button class="btn btn-primary" type="button" id="saveButton">Save unit</button>
    </div><br>

    <div id="listOfUnits" class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
    </div>

    <div class="pagination">
        <button class="pagination__button" id="previous-button">Previous</button>
        <span class="pagination__info">Page <span id="current-page">1</span></span>
        <button class="pagination__button" id="next-button">Next</button>
    </div>

</div>


<script>


    const previousButton = document.getElementById('previous-button');
    const nextButton = document.getElementById('next-button');
    const currentPageElement = document.getElementById('current-page');

    const tarjetaContainer = document.getElementById('listOfUnits');

    let currentPage = 1;

    previousButton.addEventListener('click', goToPreviousPage);
    nextButton.addEventListener('click', goToNextPage);

    if (currentPage == 1) {
        fetchUnits();
        updatePage();
    }

    function goToPreviousPage() {
        if (currentPage > 1) {

            currentPage--;
            updatePage();
            fetchUnits();
        }
    }

    function goToNextPage() {

        currentPage++;
        updatePage();
        fetchUnits();
    }

    function updatePage() {
        currentPageElement.textContent = currentPage;
        if (currentPage === 1) {
            previousButton.classList.add('hidden');
        } else {
            previousButton.classList.remove('hidden');
        }
    }

    async function fetchUnits() {
        try {
            const response = await fetch(`/unit/all?page=${currentPage}&limit=12`);
            const unitsPerPage = await response.json();

            if ((unitsPerPage.totalPages - currentPage) == '0') {
                nextButton.classList.add('hidden');
            } else {
                nextButton.classList.remove('hidden');
            }

            tarjetaContainer.innerHTML = '';

            Array.prototype.forEach.call(unitsPerPage.allUnits, unit => {

                const cardContentCode = `
                <div class="card mb-4">
                    <img src="${unit.cover}" class="card-img-top shadow-sm grow-hover" style="width: 400px; height: 300px;" onclick="viewUnit('${unit.resourceId}')">
                        <div class="card-body">
                            <h5 class="card-title" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" data-bs-toggle="tooltip" data-bs-placement="top" title="${unit.title}">${unit.title}</h5>
                            <p class="card-text">${unit.email}</p>
                            <div class="btn-group" role="group" aria-label="Basic example">
                                <button type="button" class="btn btn-primary" onclick="editUnit('${unit.resourceId}')">Edit</button>
                                <button type="button" class="btn btn-primary" onclick="deleteUnit('${unit.resourceId}')">Delete</button>
                                <button type="button" class="btn btn-primary" onclick="viewUnit('${unit.resourceId}')">View</button>
                            </div>
                        </div>
                </div>`;

                const colElement = document.createElement('div');
                colElement.classList.add('col');
                colElement.innerHTML = cardContentCode;

                tarjetaContainer.appendChild(colElement);


            });

            window.scrollTo({ top: 0, behavior: 'smooth' });

        } catch (error) {
            console.error(error);
        }
    }

    const viewUnit = async (resourceId) => {
        try {
            const generateUnit = await fetch(`/unit/generatecontent?resourceId=${resourceId}`);

            if (!generateUnit.ok) {
                throw new Error('Error while generating unit content');
            }

            const generatedUnitId = await generateUnit.json();

            if (!generatedUnitId.resourceId) {
                throw new Error('Resource Id retrieved is not valid');
            }

            window.open(`/${generatedUnitId.resourceId}`, '_blank').focus();

        } catch (error) {
            console.error('Error while viewing unit:', error);
        }
    };

    const editUnit = async (resourceId) => {
        window.location.href = `/unit/edit/${resourceId}`;
    }

    const deleteUnit = async (resourceId) => {
        fetch(`/unit/delete?resourceId=${resourceId}`, {
            method: 'DELETE'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error while deleting unit');
                }
                showNotification('Unit deleted successfully.', 'success');
            })
            .catch(error => {
                console.error(error);
                showNotification('Could not delete unit correctly', 'error');
            });
    }

    function showNotification(message, type) {
        Swal.fire({
            icon: type,
            title: message,
            showConfirmButton: false,
            timer: 2000
        }).then(() => {
            if (type !== 'warning') {
                window.location.reload();
            }
        });
    }

    const saveButton = document.getElementById('saveButton');
    saveButton.addEventListener('click', handleFileUpload);
    function handleFileUpload() {
        const jsonFileInput = document.getElementById('jsonFileInput');
        const file = jsonFileInput.files[0];

        if (file) {

            const fileExtension = file.name.split('.').pop().toLowerCase();
            if (fileExtension !== 'json') {
                showNotification('Only JSON files are allowed', 'warning');
                return;
            }

            const reader = new FileReader();
            reader.onload = function (event) {
                const jsonData = event.target.result;
                sendJsonData(jsonData);
            };
            reader.readAsText(file);
        } else {
            showNotification('No file was selected', 'warning');
        }
    }

    function sendJsonData(jsonData) {
        fetch('/unit/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: jsonData
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status == 409) {
                        showNotification('Unit already exists', 'warning');
                    } else {
                        throw new Error('Error sending unit');
                    }
                }
                showNotification('Unit saved successfully', 'success');
            })
            .catch(error => {
                console.error(error);
            });
    }

</script>