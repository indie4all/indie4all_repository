<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.20/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.20/dist/sweetalert2.all.min.js"></script>

<link rel="stylesheet" href="/css/allUsers.css">

<div class="container">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/usersCards.css">

    <div class="alert alert-success" id="alertContainer" role="alert">
        {{ message }}
    </div>

    <div class="d-flex justify-content-end">
        <button type="button" class="btn btn-primary" id="add-user-button">Add user</button>
    </div><br>

    <div id="user-card" class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
    </div>

    <div class="pagination">
        <button class="pagination__button" id="previous-button">Previous</button>
        <span class="pagination__info">Page <span id="current-page">1</span></span>
        <button class="pagination__button" id="next-button">Next</button>
    </div>

</div>

<script>

    const alertDiv = document.getElementById("alertContainer");

    function hideAlert() {
        alertDiv.style.display = "none";
    }
    setTimeout(hideAlert, 3000);

    let currentPage = 1;
    const previousButton = document.getElementById('previous-button');
    const nextButton = document.getElementById('next-button');
    const currentPageElement = document.getElementById('current-page');

    const usersCardContainer = document.getElementById('user-card');

    previousButton.addEventListener('click', goToUsersPreviousPage);
    nextButton.addEventListener('click', goToUsersNextPage);

    if (currentPage == 1) {
        updateUsersPage();
        fetchUsers();
    }

    function goToUsersPreviousPage() {
        if (currentPage > 1) {
            currentPage--;
            updateUsersPage();
            fetchUsers();
        }
    }

    function goToUsersNextPage() {
        currentPage++;
        updateUsersPage();
        fetchUsers();
    }

    function updateUsersPage() {
        currentPageElement.textContent = currentPage;
        if (currentPage === 1) {
            previousButton.classList.add('hidden');
        } else {
            previousButton.classList.remove('hidden');
        }
    }

    async function fetchUsers() {
        try {
            const response = await fetch(`/user/get/all?page=${currentPage}`);
            const allUsers = await response.json();

            if ((allUsers.totalUsersPages - currentPage) == '0') {
                nextButton.classList.add('hidden');
            } else {
                nextButton.classList.remove('hidden');
            }

            usersCardContainer.innerHTML = '';

            Array.prototype.forEach.call(allUsers.usersPerPage, user => {

                const cardContentCode = `
                    <div class="card mb-3" style="max-width: 540px;" id="user">
                        <div class="row g-0">
                            <div class="col-md-4 fill">
                                <img src="${user.image}" class="img-fluid" alt="...">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${user.name}</h5>
                                    <p class="card-text" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${user.email}</p>
                                    <p class="card-text">Role: ${user.role}</p>
                                    <p class="card-text">Active: ${user.status}</p>
                                    <div class="btn-group" role="group" aria-label="Basic example">
                                        <button type="button" class="btn btn-primary" onclick="editUser('${user.uid}')">Edit</button>
                                        <button type="button" class="btn btn-primary" onclick="deleteUser('${user.uid}')">Delete</button>
                                    </div>
                                </div>                                
                            </div>                            
                        </div>
                    </div>`;

                const colElement = document.createElement('div');
                colElement.classList.add('col');
                colElement.innerHTML = cardContentCode;

                usersCardContainer.appendChild(colElement);

            });

            window.scrollTo({ top: 0, behavior: 'smooth' });

        } catch (error) {
            console.error(error);
        }
    }

    function editUser(uid) {
        window.location.href = `/user/edit/${uid}`;
    }

    async function deleteUser(uid) {

        await fetch(`/user/delete/${uid}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        })
            .then(response => {
                if (response.ok) {
                    showNotification('User deleted succesfully.', 'success');
                } else {
                    console.error(`Error while deleting user: ${response.status}  ${response.statusText}`);
                    showNotification(`Could not delete user correctly`, 'error');
                }
            })
            .catch(error => {
                console.error('Error while calling user delete endpoint: ', error);
                showNotification(`Could not delete user correctly`, 'error');
            });
    }

    function showNotification(message, type) {
        Swal.fire({
            icon: type,
            title: message,
            showConfirmButton: false,
            timer: 2000
        }).then(() => {
            window.location.reload(true);
        });
    }

    document.getElementById("add-user-button").addEventListener("click", function () {
        window.location.href = `/user/add/form`;
    });

</script>